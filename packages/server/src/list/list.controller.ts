import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  Patch,
  Post,
  Query,
  Res,
  UseGuards,
} from '@nestjs/common';
import {
  ApiHeader,
  ApiNoContentResponse,
  ApiOkResponse,
  ApiOperation,
  ApiParam,
  ApiQuery,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';
import { Throttle } from '@nestjs/throttler';
import { Response } from 'express';
import { ApiKeyAccessScopeEnum } from '../apiKey/enum/apikScopeEnum';
import { AppAbility } from '../casl/casl-ability.factory/casl-ability.factory';
import { ApiKey } from '../decorator/apiKeyId';
import { CheckPolicies } from '../decorator/checkPolicies';
import { ApiKeyAuthGurad } from '../guard/api/apiKeyAuthGuard';
import { ApiPoliciesGuard } from '../guard/api/apiPoliciesGuard';
import { HasApiKeyAccessWithList } from '../guard/api/hasApiKeyAccessWithList';
import { ThrottlerForApiGuard } from '../guard/throttleForApiGuard';
import { ExceptionResponse } from '../resposes/response';
import { SubscriberListApiService } from '../subscriber-list/subscriber-list.api.service';
import { SubscriberList } from '../subscriber-list/subscriber-list.entity';
import { PaginationQuery } from '../types/paginationQuery';
import { ApiVersion, apiPagination } from '../utils/constants';
import { CreateListDto } from './dto/createList';
import { ListIdParam } from './dto/listIdParam';
import { UpdateListDto } from './dto/updateList';
import { ListApiService } from './list.apiService';
import { List } from './list.entity';

@UseGuards(ApiKeyAuthGurad)
@UseGuards(ThrottlerForApiGuard)
@Throttle(150, 60)
@UseGuards(ApiPoliciesGuard)
@ApiTags('List')
@ApiHeader({
  name: 'revision',
  description: 'API endpoint revision (format: YYYY-MM-DD[.suffix])',
  required: true,
  schema: {
    default: ApiVersion.June23,
  },
})
@ApiResponse({ status: '4XX', type: ExceptionResponse })
@ApiResponse({ status: '5XX', type: ExceptionResponse })
@Controller('api/list')
export class ListController {
  constructor(
    private listApiService: ListApiService,
    private subscriberListApiService: SubscriberListApiService,
  ) {}

  @UseGuards(HasApiKeyAccessWithList)
  @CheckPolicies((ability: AppAbility) =>
    ability.can(ApiKeyAccessScopeEnum.LIST_READ, List),
  )
  @ApiOperation({
    summary: 'Get List',
    description:
      'Get a list with the given list ID.<br><br>*Rate limit*:<br>Limit: 150<br>TTL: 60s\n\n**Scopes:**\n`list:read`',
  })
  @ApiParam({
    name: 'listId',
    description:
      'Primary key that uniquely identifies this list. Generated by Bespoke.',
    required: true,
    schema: {
      description:
        'Primary key that uniquely identifies this list. Generated by Bespoke.',
      type: 'string',
      example: 'UUID',
    },
  })
  @ApiOkResponse({ description: 'Get List', type: List })
  @Get(':listId')
  getList(@Param() param: ListIdParam): Promise<List> {
    return this.listApiService.getList(param.listId);
  }

  @UseGuards(HasApiKeyAccessWithList)
  @CheckPolicies((ability: AppAbility) =>
    ability.can(ApiKeyAccessScopeEnum.LIST_READ, List),
  )
  @ApiOperation({
    summary: 'Get List Count',
    description:
      'Get the total count of lists.<br><br>*Rate limit*:<br>Limit: 150<br>TTL: 60s\n\n**Scopes:**\n`list:read`',
  })
  @ApiOkResponse({ description: 'Get List Count', type: Number })
  @Get('count')
  getListCount(@ApiKey() apiKey: string): Promise<number> {
    return this.listApiService.getListCount(apiKey);
  }

  @CheckPolicies((ability: AppAbility) =>
    ability.can(ApiKeyAccessScopeEnum.LIST_READ, List),
  )
  @ApiOperation({
    summary: 'Get Lists',
    description:
      'Get all lists in an account.<br><br>*Rate limit*:<br>Limit: 150<br>TTL: 60s\n\n**Scopes:**\n`list:read`',
  })
  @ApiOkResponse({ description: 'Get Lists', type: [List] })
  @ApiQuery({
    name: 'limit',
    type: 'number',
    example: 100,
    description: `For more information please visit ${apiPagination}`,
    required: false,
  })
  @ApiQuery({
    name: 'offset',
    type: 'number',
    example: 0,
    description: `For more information please visit ${apiPagination}`,
    required: false,
  })
  @Get()
  getLists(
    @ApiKey() apiKey: string,
    @Query() query: PaginationQuery,
  ): Promise<List[]> {
    return this.listApiService.getLists({
      apiKey,
      limit: query.limit,
      offset: query.page,
    });
  }

  @CheckPolicies((ability: AppAbility) =>
    ability.can(ApiKeyAccessScopeEnum.LIST_MANAGE, List),
  )
  @ApiOperation({
    summary: 'Create List',
    description:
      'Create a new list.<br><br>*Rate limit*:<br>Limit: 150<br>TTL: 60s\n\n**Scopes:**\n`list:manage`',
  })
  @ApiOkResponse({ description: 'Create New List', type: List })
  @Post()
  createList(
    @Body() body: CreateListDto,
    @ApiKey() apiKey: string,
  ): Promise<List> {
    return this.listApiService.creatList(body, apiKey);
  }

  @UseGuards(HasApiKeyAccessWithList)
  @CheckPolicies((ability: AppAbility) =>
    ability.can(ApiKeyAccessScopeEnum.LIST_MANAGE, List),
  )
  @ApiOperation({
    summary: 'Update List',
    description:
      'Update the name of a list with the given list ID.<br><br>*Rate limit*:<br>Limit: 150<br>TTL: 60s\n\n**Scopes:**\n`list:manage`',
  })
  @ApiOkResponse({ description: 'Update A List', type: List })
  @ApiParam({
    name: 'listId',
    description:
      'Primary key that uniquely identifies this list. Generated by Bespoke.',
    required: true,
    schema: {
      description:
        'Primary key that uniquely identifies this list. Generated by Bespoke.',
      type: 'string',
      example: 'UUID',
    },
  })
  @Patch(':listId')
  updateList(
    @Param() param: ListIdParam,
    @Body() body: UpdateListDto,
  ): Promise<List> {
    return this.listApiService.updateList(param.listId, body);
  }

  @UseGuards(HasApiKeyAccessWithList)
  @CheckPolicies((ability: AppAbility) =>
    ability.can(ApiKeyAccessScopeEnum.LIST_MANAGE, List),
  )
  @ApiOperation({
    summary: 'Delete List',
    description:
      'Delete a list with the given list ID.<br><br>*Rate limit*:<br>Limit: 150<br>TTL: 60s\n\n**Scopes:**\n`list:manage`',
  })
  @ApiNoContentResponse({ description: 'Delete A List' })
  @ApiParam({
    name: 'listId',
    description:
      'Primary key that uniquely identifies this list. Generated by Bespoke.',
    required: true,
    schema: {
      description:
        'Primary key that uniquely identifies this list. Generated by Bespoke.',
      type: 'string',
      example: 'UUID',
    },
  })
  @Delete(':listId')
  deleteList(@Param() param: ListIdParam, @Res() res: Response): Promise<void> {
    return this.listApiService.deleteList(param.listId, res);
  }

  @UseGuards(HasApiKeyAccessWithList)
  @CheckPolicies((ability: AppAbility) =>
    ability.can(ApiKeyAccessScopeEnum.LIST_READ, List),
  )
  @ApiOperation({
    summary: 'Get List Subscribers',
    description:
      'Get all subscribers within a list with the given list ID.<br><br>*Rate limit*:<br>Limit: 150<br>TTL: 60s\n\n**Scopes:**\n`list:read`',
  })
  @ApiParam({
    name: 'listId',
    description:
      'Primary key that uniquely identifies this subscriber. Generated by Bespoke.',
    required: true,
    schema: {
      description:
        'Primary key that uniquely identifies this subscriber. Generated by Bespoke.',
      type: 'string',
      example: 'UUID',
    },
  })
  @ApiOkResponse({ description: 'Get List Subscribers', type: SubscriberList })
  @ApiQuery({
    name: 'limit',
    type: 'number',
    example: 100,
    description: `For more information please visit ${apiPagination}#pagination`,
    required: false,
  })
  @ApiQuery({
    name: 'offset',
    type: 'number',
    example: 0,
    description: `For more information please visit ${apiPagination}#pagination`,
    required: false,
  })
  @Get(':listId/subscriber')
  getListSubscribers(
    @Param() param: ListIdParam,
    @Query() query: PaginationQuery,
  ): Promise<SubscriberList[]> {
    return this.subscriberListApiService.getListSubscribers({
      id: param.listId,
      take: query.limit,
      offset: query.page,
    });
  }

  @UseGuards(HasApiKeyAccessWithList)
  @CheckPolicies((ability: AppAbility) =>
    ability.can(ApiKeyAccessScopeEnum.LIST_READ, List),
  )
  @ApiOperation({
    summary: 'Get List Subscribers Count',
    description:
      'Get total count of subscribers within a list with the given list ID.<br><br>*Rate limit*:<br>Limit: 150<br>TTL: 60s\n\n**Scopes:**\n`list:read`',
  })
  @ApiParam({
    name: 'listId',
    description:
      'Primary key that uniquely identifies this subscriber. Generated by Bespoke.',
    required: true,
    schema: {
      description:
        'Primary key that uniquely identifies this subscriber. Generated by Bespoke.',
      type: 'string',
      example: 'UUID',
    },
  })
  @ApiOkResponse({ description: 'Get List Subscribers Count', type: Number })
  @Get(':listId/subscriber/count')
  getListSubscribersCount(@Param() param: ListIdParam): Promise<number> {
    return this.subscriberListApiService.getListSubscribersCount(param.listId);
  }
}
