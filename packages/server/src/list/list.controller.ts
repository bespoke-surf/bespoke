import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  Patch,
  Post,
  Query,
  Res,
  UseGuards,
} from '@nestjs/common';
import {
  ApiHeader,
  ApiNoContentResponse,
  ApiOkResponse,
  ApiOperation,
  ApiParam,
  ApiQuery,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';
import { Throttle } from '@nestjs/throttler';
import { Response } from 'express';
import { ApiKeyAccessScopeEnum } from '../apiKey/enum/apikScopeEnum';
import { AppAbility } from '../casl/casl-ability.factory/casl-ability.factory';
import { ApiKey } from '../decorator/ApiKeyId';
import { CheckPolicies } from '../decorator/checkPolicies';
import { ApiKeyAuthGurad } from '../guard/apiKeyAuthGuard';
import { ApiPoliciesGuard } from '../guard/apiPoliciesGuard';
import { ThrottlerForApiGuard } from '../guard/throttleForApiGuard';
import { ExceptionResponse } from '../resposes/response';
import { ApiVersion, apiOverview } from '../utils/constants';
import { CreateListDto } from './dto/createList';
import { GetListParam, GetListsQuery } from './dto/getListParam';
import { UpdateListDto } from './dto/updateList';
import { ListApiService } from './list.apiService';
import { List } from './list.entity';

@UseGuards(ApiKeyAuthGurad)
@UseGuards(ThrottlerForApiGuard)
@Throttle(150, 60)
@UseGuards(ApiPoliciesGuard)
@ApiTags('Lists')
@ApiHeader({
  name: 'revision',
  description: 'API endpoint revision (format: YYYY-MM-DD[.suffix])',
  required: true,
  schema: {
    default: ApiVersion.June23,
  },
})
@ApiResponse({ status: '4XX', type: ExceptionResponse })
@ApiResponse({ status: '5XX', type: ExceptionResponse })
@Controller('api/list')
export class ListController {
  constructor(private listApiService: ListApiService) {}

  @CheckPolicies((ability: AppAbility) =>
    ability.can(ApiKeyAccessScopeEnum.LIST_READ, List),
  )
  @ApiOperation({
    summary: 'Get List',
    description:
      'Get a list with the given list ID.<br><br>*Rate limit*:<br>Limit: 150<br>TTL: 60s\n\n**Scopes:**\n`list:read`',
  })
  @ApiParam({
    name: 'id',
    description:
      'Primary key that uniquely identifies this list. Generated by Bespoke.',
    required: true,
    schema: {
      description:
        'Primary key that uniquely identifies this list. Generated by Bespoke.',
      type: 'string',
      example: 'UUID',
    },
  })
  @ApiOkResponse({ description: 'Get List', type: List })
  @Get(':id')
  getList(@Param() param: GetListParam): Promise<List> {
    return this.listApiService.getList(param.id);
  }

  @CheckPolicies((ability: AppAbility) =>
    ability.can(ApiKeyAccessScopeEnum.LIST_READ, List),
  )
  @ApiOperation({
    summary: 'Get Lists',
    description:
      'Get all lists in an account.<br><br>*Rate limit*:<br>Limit: 150<br>TTL: 60s\n\n**Scopes:**\n`list:read`',
  })
  @ApiOkResponse({ description: 'Get Lists', type: [List] })
  @ApiQuery({
    name: 'limit',
    type: 'number',
    example: 100,
    description: `For more information please visit ${apiOverview}#pagination`,
    required: false,
  })
  @ApiQuery({
    name: 'page',
    type: 'number',
    example: 1,
    description: `For more information please visit ${apiOverview}#pagination`,
    required: false,
  })
  @Get()
  getLists(
    @ApiKey() apiKey: string,
    @Query() query: GetListsQuery,
  ): Promise<List[]> {
    return this.listApiService.getLists({
      apiKey,
      limit: query.limit,
      page: query.page,
    });
  }

  @CheckPolicies((ability: AppAbility) =>
    ability.can(ApiKeyAccessScopeEnum.LIST_MANAGE, List),
  )
  @ApiOperation({
    summary: 'Create List',
    description:
      'Create a new list.<br><br>*Rate limit*:<br>Limit: 150<br>TTL: 60s\n\n**Scopes:**\n`list:manage`',
  })
  @ApiOkResponse({ description: 'Create New List', type: List })
  @Post()
  createList(
    @Body() body: CreateListDto,
    @ApiKey() apiKey: string,
  ): Promise<List> {
    return this.listApiService.creatList(body, apiKey);
  }

  @CheckPolicies((ability: AppAbility) =>
    ability.can(ApiKeyAccessScopeEnum.LIST_MANAGE, List),
  )
  @ApiOperation({
    summary: 'Update List',
    description:
      'Update the name of a list with the given list ID.<br><br>*Rate limit*:<br>Limit: 150<br>TTL: 60s\n\n**Scopes:**\n`list:manage`',
  })
  @ApiOkResponse({ description: 'Update A List', type: List })
  @Patch()
  updateList(@Body() body: UpdateListDto): Promise<List> {
    return this.listApiService.updateList(body);
  }

  @CheckPolicies((ability: AppAbility) =>
    ability.can(ApiKeyAccessScopeEnum.LIST_MANAGE, List),
  )
  @ApiOperation({
    summary: 'Delete List',
    description:
      'Delete a list with the given list ID.<br><br>*Rate limit*:<br>Limit: 150<br>TTL: 60s\n\n**Scopes:**\n`list:manage`',
  })
  @ApiNoContentResponse({ description: 'Delete A List' })
  @ApiParam({
    name: 'id',
    description:
      'Primary key that uniquely identifies this list. Generated by Bespoke.',
    required: true,
    schema: {
      description:
        'Primary key that uniquely identifies this list. Generated by Bespoke.',
      type: 'string',
      example: 'UUID',
    },
  })
  @Delete(':id')
  deleteList(@Param('id') id: string, @Res() res: Response): Promise<void> {
    return this.listApiService.deleteList(id, res);
  }
}
