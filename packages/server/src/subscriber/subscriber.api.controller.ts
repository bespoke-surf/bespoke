import { Controller, Get, Param, UseGuards } from '@nestjs/common';
import {
  ApiHeader,
  ApiOkResponse,
  ApiOperation,
  ApiParam,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';
import { Throttle } from '@nestjs/throttler';
import { ApiKeyAccessScopeEnum } from '../apiKey/enum/apikScopeEnum';
import { AppAbility } from '../casl/casl-ability.factory/casl-ability.factory';
import { CheckPolicies } from '../decorator/checkPolicies';
import { ApiKeyAuthGurad } from '../guard/apiKeyAuthGuard';
import { ApiPoliciesGuard } from '../guard/apiPoliciesGuard';
import { ThrottlerForApiGuard } from '../guard/throttleForApiGuard';
import { ExceptionResponse } from '../resposes/response';
import { ApiVersion } from '../utils/constants';
import { GetSubscriberParam } from './dto/getSubscriberParam';
import { SubscriberApiService } from './subscriber.api.service';
import { Subscriber } from './subscriber.entity';

@UseGuards(ApiKeyAuthGurad)
@UseGuards(ThrottlerForApiGuard)
@Throttle(150, 60)
@UseGuards(ApiPoliciesGuard)
@ApiTags('Subscriber')
@ApiHeader({
  name: 'revision',
  description: 'API endpoint revision (format: YYYY-MM-DD[.suffix])',
  required: true,
  schema: {
    default: ApiVersion.June23,
  },
})
@ApiResponse({ status: '4XX', type: ExceptionResponse })
@ApiResponse({ status: '5XX', type: ExceptionResponse })
@Controller('api/subscriber')
export class SubscriberApiController {
  constructor(private subscriberApiService: SubscriberApiService) {}

  @CheckPolicies((ability: AppAbility) =>
    ability.can(ApiKeyAccessScopeEnum.SUBSCRIBER_READ, Subscriber),
  )
  @ApiOperation({
    summary: 'Get Subscriber',
    description:
      'Get subscriber with the given subscriber ID.<br><br>*Rate limit*:<br>Limit: 150<br>TTL: 60s\n\n**Scopes:**\n`list:read`',
  })
  @ApiParam({
    name: 'id',
    description:
      'Primary key that uniquely identifies this subscriber. Generated by Bespoke.',
    required: true,
    schema: {
      description:
        'Primary key that uniquely identifies this subscriber. Generated by Bespoke.',
      type: 'string',
      example: 'UUID',
    },
  })
  @ApiOkResponse({ description: 'Get Subscriber', type: Subscriber })
  @Get(':id')
  getSubscriber(@Param() param: GetSubscriberParam): Promise<Subscriber> {
    return this.subscriberApiService.getSubscriber(param.id);
  }
}
